@page "/events/{EventId:int}/checkin"
@using EventManagementSystem.Core
@inject TicketService TicketService
@inject EventService EventService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject AuthService AuthService
@attribute [Authorize(Roles = "EventOrganizer,Admin")]

<PageTitle>Event Check-In - Event Management System</PageTitle>

<div class="checkin-container">
    <div class="page-header">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/events">My Events</a></li>
                <li class="breadcrumb-item">@eventName</li>
                <li class="breadcrumb-item active" aria-current="page">Check-In</li>
            </ol>
        </nav>
        
        <div class="header-content">
            <h1 class="page-title">
                <i class="bi bi-qr-code-scan me-3"></i>
                Event Check-In
            </h1>
            <p class="page-subtitle">Scan tickets for @eventName</p>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="loading-state">
            <div class="spinner-border text-primary" role="status"></div>
            <p>Loading check-in interface...</p>
        </div>
    }
    else if (hasError)
    {
        <div class="error-state">
            <div class="alert alert-danger">
                <i class="bi bi-exclamation-triangle me-2"></i>
                <strong>Error:</strong> @errorMessage
                <button class="btn btn-outline-danger btn-sm ms-3" @onclick="LoadEventDetails">
                    <i class="bi bi-arrow-clockwise me-1"></i>Retry
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="checkin-content">
            <!-- Stats Cards -->
            <div class="stats-row">
                <div class="row g-4">
                    <div class="col-md-3">
                        <div class="stat-card total-tickets">
                            <div class="stat-icon">
                                <i class="bi bi-ticket-perforated"></i>
                            </div>
                            <div class="stat-details">
                                <h3>@totalTickets</h3>
                                <p>Total Tickets</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stat-card checked-in">
                            <div class="stat-icon">
                                <i class="bi bi-check-circle"></i>
                            </div>
                            <div class="stat-details">
                                <h3>@checkedInCount</h3>
                                <p>Checked In</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stat-card pending">
                            <div class="stat-icon">
                                <i class="bi bi-clock"></i>
                            </div>
                            <div class="stat-details">
                                <h3>@pendingCount</h3>
                                <p>Pending</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stat-card percentage">
                            <div class="stat-icon">
                                <i class="bi bi-graph-up"></i>
                            </div>
                            <div class="stat-details">
                                <h3>@checkedInPercentage%</h3>
                                <p>Completion</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Scanner Interface -->
            <div class="scanner-section">
                <div class="row g-4">
                    <div class="col-lg-6">
                        <div class="scanner-card">
                            <div class="card">
                                <div class="card-header">
                                    <h5 class="mb-0">
                                        <i class="bi bi-camera me-2"></i>
                                        QR Code Scanner
                                    </h5>
                                </div>
                                <div class="card-body">
                                    <div class="scanner-interface">
                                        <!-- Camera Preview -->
                                        <div class="camera-preview" id="cameraPreview">
                                            <div class="scanner-overlay">
                                                <div class="scan-frame"></div>
                                                <p class="scan-instruction">Position QR code within the frame</p>
                                            </div>
                                        </div>
                                        
                                        <!-- Scanner Controls -->
                                        <div class="scanner-controls">
                                            <button class="btn btn-primary btn-lg" id="startScanBtn" @onclick="StartScanner">
                                                <i class="bi bi-play-circle me-2"></i>Start Scanner
                                            </button>
                                            <button class="btn btn-secondary btn-lg" id="stopScanBtn" @onclick="StopScanner" style="display: none;">
                                                <i class="bi bi-stop-circle me-2"></i>Stop Scanner
                                            </button>
                                        </div>

                                        <!-- Manual Entry -->
                                        <div class="manual-entry">
                                            <div class="separator">
                                                <span>OR</span>
                                            </div>
                                            <div class="input-group">
                                                <input type="text" class="form-control" placeholder="Enter ticket code manually" 
                                                       @bind="manualTicketCode" @onkeypress="OnManualEntryKeyPress" />
                                                <button class="btn btn-outline-primary" @onclick="ProcessManualEntry" disabled="@isProcessing">
                                                    <i class="bi bi-search"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-lg-6">
                        <div class="result-card">
                            <div class="card">
                                <div class="card-header">
                                    <h5 class="mb-0">
                                        <i class="bi bi-info-circle me-2"></i>
                                        Check-In Result
                                    </h5>
                                </div>
                                <div class="card-body">
                                    @if (isProcessing)
                                    {
                                        <div class="processing-state">
                                            <div class="spinner-border text-primary" role="status"></div>
                                            <p class="mt-3">Processing ticket...</p>
                                        </div>
                                    }
                                    else if (lastResult != null)
                                    {
                                        <div class="result-display @(lastResult.Success ? "success" : "error")">
                                            <div class="result-icon">
                                                <i class="bi @(lastResult.Success ? "bi-check-circle-fill" : "bi-x-circle-fill")"></i>
                                            </div>
                                            <div class="result-details">
                                                <h4>@(lastResult.Success ? "Check-In Successful!" : "Check-In Failed")</h4>
                                                <p class="result-message">@lastResult.Message</p>
                                                
                                                @if (lastResult.Success && lastResult.TicketDetails != null)
                                                {
                                                    <div class="ticket-info">
                                                        <div class="info-row">
                                                            <strong>Attendee:</strong>
                                                            <span>@lastResult.TicketDetails.AttendeeName</span>
                                                        </div>
                                                        <div class="info-row">
                                                            <strong>Email:</strong>
                                                            <span>@lastResult.TicketDetails.AttendeeEmail</span>
                                                        </div>
                                                        <div class="info-row">
                                                            <strong>Ticket Type:</strong>
                                                            <span>@lastResult.TicketDetails.TicketTypeName</span>
                                                        </div>
                                                        <div class="info-row">
                                                            <strong>Reference:</strong>
                                                            <span>@lastResult.TicketDetails.UniqueReferenceCode</span>
                                                        </div>
                                                        <div class="info-row">
                                                            <strong>Check-In Time:</strong>
                                                            <span>@lastResult.TicketDetails.CheckedInAt?.ToString("HH:mm:ss")</span>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="waiting-state">
                                            <i class="bi bi-qr-code display-4 text-muted"></i>
                                            <h5 class="text-muted mt-3">Ready to Scan</h5>
                                            <p class="text-muted">Start the scanner or enter a ticket code manually.</p>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int EventId { get; set; }

    private bool isLoading = true;
    private bool hasError = false;
    private string errorMessage = "";
    private string eventName = "";
    private bool isProcessing = false;
    private string manualTicketCode = "";

    // Statistics
    private int totalTickets = 0;
    private int checkedInCount = 0;
    private int pendingCount = 0;
    private int checkedInPercentage = 0;

    // Check-in result
    private CheckInTicketResponse? lastResult = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadEventDetails();
        await LoadStatistics();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeQRScanner", DotNetObjectReference.Create(this), EventId);
        }
    }

    private async Task LoadEventDetails()
    {
        try
        {
            isLoading = true;
            hasError = false;

            var eventResult = await EventService.GetEventByIdAsync(EventId);
            if (eventResult != null)
            {
                eventName = eventResult.EventName;
            }
            else
            {
                hasError = true;
                errorMessage = "Event not found or access denied.";
                return;
            }
        }
        catch (Exception ex)
        {
            hasError = true;
            errorMessage = "An error occurred while loading event details.";
            Console.WriteLine($"Error loading event details: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadStatistics()
    {
        try
        {
            var result = await TicketService.GetEventCheckInsAsync(EventId);
            if (result?.Success == true && result.Data != null)
            {
                var checkIns = result.Data;
                totalTickets = checkIns.Count;
                checkedInCount = checkIns.Count(c => c.CheckedInAt.HasValue);
                pendingCount = totalTickets - checkedInCount;
                checkedInPercentage = totalTickets > 0 ? (int)Math.Round((double)checkedInCount / totalTickets * 100) : 0;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading statistics: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task StartScanner()
    {
        await JSRuntime.InvokeVoidAsync("startQRScanner");
    }

    private async Task StopScanner()
    {
        await JSRuntime.InvokeVoidAsync("stopQRScanner");
    }

    [JSInvokable]
    public async Task OnQRCodeScanned(string qrCodeData)
    {
        await ProcessTicketCheckIn(qrCodeData);
    }

    private async Task OnManualEntryKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await ProcessManualEntry();
        }
    }

    private async Task ProcessManualEntry()
    {
        if (!string.IsNullOrWhiteSpace(manualTicketCode))
        {
            await ProcessTicketCheckIn(manualTicketCode);
            manualTicketCode = "";
        }
    }

    private async Task ProcessTicketCheckIn(string qrCodeData)
    {
        try
        {
            isProcessing = true;
            StateHasChanged();

            var request = new CheckInTicketRequest
            {
                QRCodeData = qrCodeData
            };

            var result = await TicketService.CheckInTicketAsync(request);
            lastResult = result?.Data;

            if (result?.Success == true)
            {
                await LoadStatistics();
                await JSRuntime.InvokeVoidAsync("playSuccessSound");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("playErrorSound");
            }
        }
        catch (Exception ex)
        {
            lastResult = new CheckInTicketResponse
            {
                Success = false,
                Message = "An error occurred while processing the check-in."
            };
            Console.WriteLine($"Error processing check-in: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }
}
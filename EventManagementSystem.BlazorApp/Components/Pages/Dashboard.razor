@page "/dashboard"
@using Microsoft.JSInterop
@using EventManagementSystem.Core.DTOs
@using EventManagementSystem.Core
@inject DashboardService DashboardService
@inject EventService EventService
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Dashboard - Event Management System</PageTitle>

<!-- Dashboard Page with Enhanced Layout -->
<div class="dashboard-page">
    <div class="dashboard-container">
    <!-- Page Header -->
    <div class="dashboard-header">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h1 class="dashboard-title">
                    <i class="bi bi-speedometer2 me-3"></i>Dashboard
                </h1>
                <p class="dashboard-subtitle">
                    Welcome back, @(currentUser?.Name ?? "User")!
                    @if (currentUser?.Role == EventManagementSystem.Core.UserRole.Attendee)
                    {
                        <span>Discover amazing events and manage your registrations.</span>
                    }
                    else if (currentUser?.Role == EventManagementSystem.Core.UserRole.EventOrganizer)
                    {
                        <span>Here's what's happening with your events.</span>
                    }
                    else
                    {
                        <span>Manage the platform and oversee all activities.</span>
                    }
                </p>
            </div>
            <div class="d-flex gap-2">
                <button class="btn btn-outline-primary" @onclick="RefreshData">
                    <i class="bi bi-arrow-clockwise me-2"></i>Refresh
                </button>
                @if (currentUser?.Role == EventManagementSystem.Core.UserRole.Attendee)
                {
                    <a href="/events" class="btn btn-primary">
                        <i class="bi bi-search me-2"></i>Browse Events
                    </a>
                }
            </div>
        </div>
    </div>

    @if (hasError)
    {
        <div class="error-container">
            <div class="alert alert-danger" role="alert">
                <h4 class="alert-heading"><i class="bi bi-exclamation-triangle me-2"></i>Dashboard Error</h4>
                <p>@errorMessage</p>
                <hr>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-danger" @onclick="RetryLoad">
                        <i class="bi bi-arrow-clockwise me-2"></i>Retry
                    </button>
                    <a href="/events" class="btn btn-primary">
                        <i class="bi bi-search me-2"></i>Browse Events Instead
                    </a>
                </div>
            </div>
        </div>
    }
    else if (isLoading)
    {
        <div class="loading-container">
            <div class="d-flex justify-content-center align-items-center" style="min-height: 400px;">
                <div class="text-center">
                    <div class="spinner-border text-primary mb-3" role="status">
                        <span class="visually-hidden">Loading dashboard...</span>
                    </div>
                    <p class="text-muted">Loading your dashboard...</p>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Stats Cards Row -->
        <div class="stats-row mb-4">
            <div class="row g-3">
                @if (currentUser?.Role == EventManagementSystem.Core.UserRole.EventOrganizer || currentUser?.Role == EventManagementSystem.Core.UserRole.Admin)
                {
                    <!-- Organizer/Admin Stats -->
                    <div class="col-md-6 col-xl-3">
                        <div class="stat-card">
                            <div class="stat-icon total-events">
                                <i class="bi bi-calendar-event"></i>
                            </div>
                            <div class="stat-content">
                                <h3>@(dashboardStats?.TotalEvents ?? 0)</h3>
                                <p>My Events</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 col-xl-3">
                        <div class="stat-card">
                            <div class="stat-icon active-events">
                                <i class="bi bi-calendar-check"></i>
                            </div>
                            <div class="stat-content">
                                <h3>@(dashboardStats?.ActiveEvents ?? 0)</h3>
                                <p>Active Events</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 col-xl-3">
                        <div class="stat-card">
                            <div class="stat-icon registrations">
                                <i class="bi bi-people"></i>
                            </div>
                            <div class="stat-content">
                                <h3>@(dashboardStats?.TotalRegistrations ?? 0)</h3>
                                <p>Total Attendees</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 col-xl-3">
                        <div class="stat-card">
                            <div class="stat-icon revenue">
                                <i class="bi bi-cash-stack"></i>
                            </div>
                            <div class="stat-content">
                                <h3>@FormatCurrency(dashboardStats?.TotalRevenue ?? 0)</h3>
                                <p>Total Revenue</p>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <!-- Attendee Stats -->
                    <div class="col-md-6 col-xl-3">
                        <div class="stat-card">
                            <div class="stat-icon registrations">
                                <i class="bi bi-ticket-perforated"></i>
                            </div>
                            <div class="stat-content">
                                <h3>@(attendeeStats?.TotalRegistrations ?? 0)</h3>
                                <p>My Registrations</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 col-xl-3">
                        <div class="stat-card">
                            <div class="stat-icon active-events">
                                <i class="bi bi-calendar-check"></i>
                            </div>
                            <div class="stat-content">
                                <h3>@(attendeeStats?.UpcomingEvents ?? 0)</h3>
                                <p>Upcoming Events</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 col-xl-3">
                        <div class="stat-card">
                            <div class="stat-icon total-events">
                                <i class="bi bi-calendar-event"></i>
                            </div>
                            <div class="stat-content">
                                <h3>@(attendeeStats?.AttendedEvents ?? 0)</h3>
                                <p>Events Attended</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 col-xl-3">
                        <div class="stat-card">
                            <div class="stat-icon revenue">
                                <i class="bi bi-star"></i>
                            </div>
                            <div class="stat-content">
                                <h3>@(attendeeStats?.FavoriteEvents ?? 0)</h3>
                                <p>Favorite Events</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Main Content Row -->
        <div class="row g-4">
            <!-- Left Column -->
            <div class="col-lg-8">
                <!-- Quick Actions -->
                <div class="dashboard-card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-lightning me-2"></i>Quick Actions
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (currentUser?.Role == EventManagementSystem.Core.UserRole.Attendee)
                        {
                            <!-- Attendee Quick Actions -->
                            <div class="quick-actions">
                                <div class="row g-3">
                                    <div class="col-sm-6 col-lg-4">
                                        <a href="/events" class="quick-action-card">
                                            <div class="qa-icon browse">
                                                <i class="bi bi-search"></i>
                                            </div>
                                            <div class="qa-content">
                                                <h6>Browse Events</h6>
                                                <small>Discover new events to attend</small>
                                            </div>
                                        </a>
                                    </div>
                                    <div class="col-sm-6 col-lg-4">
                                        <a href="/my-registrations" class="quick-action-card">
                                            <div class="qa-icon tickets">
                                                <i class="bi bi-ticket-perforated"></i>
                                            </div>
                                            <div class="qa-content">
                                                <h6>My Tickets</h6>
                                                <small>View your event registrations</small>
                                            </div>
                                        </a>
                                    </div>
                                    <div class="col-sm-6 col-lg-4">
                                        <a href="/profile" class="quick-action-card">
                                            <div class="qa-icon profile">
                                                <i class="bi bi-person-gear"></i>
                                            </div>
                                            <div class="qa-content">
                                                <h6>Profile</h6>
                                                <small>Update your account settings</small>
                                            </div>
                                        </a>
                                    </div>
                                </div>
                            </div>

                            <!-- Role Upgrade Section for Attendees -->
                            <div class="upgrade-section mt-4">
                                <div class="upgrade-card">
                                    <div class="upgrade-content">
                                        <div class="upgrade-icon">
                                            <i class="bi bi-arrow-up-circle"></i>
                                        </div>
                                        <div class="upgrade-text">
                                            <h6>Want to organize events?</h6>
                                            <p>Upgrade to Event Organizer and start creating your own amazing events!</p>
                                        </div>
                                    </div>
                                    <button class="btn btn-upgrade" @onclick="UpgradeToOrganizer" disabled="@isUpgrading">
                                        @if (isUpgrading)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                            <span>Upgrading...</span>
                                        }
                                        else
                                        {
                                            <i class="bi bi-star me-2"></i>
                                            <span>Become Organizer</span>
                                        }
                                    </button>
                                </div>
                            </div>
                        }
                        else
                        {
                            <!-- Organizer/Admin Quick Actions - Focused on Event Management -->
                            <div class="quick-actions">
                                <div class="row g-3">
                                    <div class="col-sm-6 col-lg-4">
                                        <a href="/create-event" class="quick-action-card primary-action">
                                            <div class="qa-icon create">
                                                <i class="bi bi-plus-circle"></i>
                                            </div>
                                            <div class="qa-content">
                                                <h6>Create Event</h6>
                                                <small>Start planning your next event</small>
                                            </div>
                                        </a>
                                    </div>
                                    <div class="col-sm-6 col-lg-4">
                                        <a href="/my-events" class="quick-action-card">
                                            <div class="qa-icon manage">
                                                <i class="bi bi-calendar-event"></i>
                                            </div>
                                            <div class="qa-content">
                                                <h6>My Events</h6>
                                                <small>Manage your existing events</small>
                                            </div>
                                        </a>
                                    </div>
                                    <div class="col-sm-6 col-lg-4">
                                        <a href="/analytics" class="quick-action-card">
                                            <div class="qa-icon analytics">
                                                <i class="bi bi-graph-up"></i>
                                            </div>
                                            <div class="qa-content">
                                                <h6>Analytics</h6>
                                                <small>View detailed event metrics</small>
                                            </div>
                                        </a>
                                    </div>
                                </div>
                            </div>

                            <!-- Secondary Actions for Organizers -->
                            <div class="secondary-actions mt-4">
                                <h6 class="secondary-title">
                                    <i class="bi bi-person me-2"></i>Personal
                                </h6>
                                <div class="row g-3">
                                    <div class="col-sm-6 col-lg-4">
                                        <a href="/my-registrations" class="secondary-action-card">
                                            <div class="sa-icon">
                                                <i class="bi bi-ticket-perforated"></i>
                                            </div>
                                            <div class="sa-content">
                                                <span>My Tickets</span>
                                                <small>Events you're attending</small>
                                            </div>
                                        </a>
                                    </div>
                                    <div class="col-sm-6 col-lg-4">
                                        <a href="/events" class="secondary-action-card">
                                            <div class="sa-icon">
                                                <i class="bi bi-search"></i>
                                            </div>
                                            <div class="sa-content">
                                                <span>Browse Events</span>
                                                <small>Discover events to attend</small>
                                            </div>
                                        </a>
                                    </div>
                                    <div class="col-sm-6 col-lg-4">
                                        <a href="/profile" class="secondary-action-card">
                                            <div class="sa-icon">
                                                <i class="bi bi-person-gear"></i>
                                            </div>
                                            <div class="sa-content">
                                                <span>Profile</span>
                                                <small>Account settings</small>
                                            </div>
                                        </a>
                                    </div>
                                </div>
                            </div>
                        }

                        @if (showUpgradeMessage && !string.IsNullOrEmpty(upgradeMessage))
                        {
                            <div class="alert alert-info mt-3" role="alert">
                                <i class="bi bi-info-circle me-2"></i>@upgradeMessage
                            </div>
                        }
                    </div>
                </div>

                <!-- Top Events -->
                <div class="dashboard-card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-trophy me-2"></i>Top Performing Events
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (dashboardStats?.TopEvents?.Any() == true)
                        {
                            <div class="top-events-list">
                                @foreach (var eventStat in dashboardStats.TopEvents)
                                {
                                    <div class="top-event-item">
                                        <div class="event-info">
                                            <h6>@eventStat.EventName</h6>
                                            <div class="event-metrics">
                                                <span class="metric">
                                                    <i class="bi bi-people"></i>
                                                    @eventStat.RegistrationCount registrations
                                                </span>
                                                <span class="metric">
                                                    <i class="bi bi-check-circle"></i>
                                                    @eventStat.CheckInCount check-ins
                                                </span>
                                                <span class="metric">
                                                    <i class="bi bi-cash"></i>
                                                    $@eventStat.Revenue revenue
                                                </span>
                                            </div>
                                        </div>
                                        <div class="event-actions">
                                            <a href="/events/@eventStat.EventID" class="btn btn-sm btn-outline-primary">
                                                <i class="bi bi-eye"></i>
                                            </a>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="empty-state">
                                <i class="bi bi-trophy"></i>
                                <p>Your top performing events will appear here once they start getting attendees.</p>
                                <a href="/create-event" class="btn btn-primary btn-sm mt-2">
                                    <i class="bi bi-plus-circle me-2"></i>Create Your First Event
                                </a>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Right Column -->
            <div class="col-lg-4">
                <!-- Live Events -->
                <div class="dashboard-card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-broadcast me-2"></i>Live Events
                            <span class="live-indicator"></span>
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (liveEvents?.Any() == true)
                        {
                            <div class="live-events-list">
                                @foreach (var liveEvent in liveEvents)
                                {
                                    <div class="live-event-item">
                                        <div class="live-event-header">
                                            <h6>@liveEvent.EventName</h6>
                                            <span class="live-badge">LIVE</span>
                                        </div>
                                        <div class="live-event-stats">
                                            <div class="stat">
                                                <span class="label">Capacity:</span>
                                                <span class="value">@liveEvent.CurrentAttendance / @liveEvent.TotalCapacity</span>
                                            </div>
                                            <div class="stat">
                                                <span class="label">Today:</span>
                                                <span class="value">@liveEvent.CheckedInToday check-ins</span>
                                            </div>
                                        </div>
                                        @if (liveEvent.LastCheckIn > DateTime.MinValue)
                                        {
                                            <small class="text-muted">
                                                Last check-in: @liveEvent.LastCheckIn.ToString("HH:mm")
                                            </small>
                                        }
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="empty-state small">
                                <i class="bi bi-calendar-week"></i>
                                <p>No live events today</p>
                            </div>
                        }
                    </div>
                </div>

                <!-- Recent Activity -->
                <div class="dashboard-card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-activity me-2"></i>Recent Activity
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (dashboardStats?.RecentActivities?.Any() == true)
                        {
                            <div class="activity-feed">
                                @foreach (var activity in dashboardStats.RecentActivities)
                                {
                                    <div class="activity-item">
                                        <div class="activity-icon @GetActivityClass(activity.ActivityType)">
                                            <i class="bi @GetActivityIcon(activity.ActivityType)"></i>
                                        </div>
                                        <div class="activity-content">
                                            <p>@activity.Description</p>
                                            <div class="activity-meta">
                                                <small class="text-muted">
                                                    @activity.UserName • @GetTimeAgo(activity.Timestamp)
                                                </small>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="empty-state small">
                                <i class="bi bi-clock"></i>
                                <p>No recent activity</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    </div>
</div>

@code {
    private DashboardStatsDto? dashboardStats;
    private AttendeeStatsDto? attendeeStats;
    private List<LiveEventStatsDto> liveEvents = new();
    private UserDto? currentUser;
    private bool isLoading = true;
    private bool isUpgrading = false;
    private string? upgradeMessage;
    private bool showUpgradeMessage = false;
    private string? errorMessage;
    private bool hasError = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // DIAGNOSTIC: Log dashboard initialization start
            Console.WriteLine("DEBUG: Dashboard component initializing...");
            var startTime = DateTime.Now;
            
            // Wait a bit for authentication state to stabilize after login
            await Task.Delay(100);
            
            // Check authentication - redirect to login if not authenticated
            if (!await AuthService.IsAuthenticatedAsync())
            {
                Console.WriteLine("DEBUG: User not authenticated, redirecting to login");
                Navigation.NavigateTo($"/login?returnUrl={Uri.EscapeDataString("/dashboard")}");
                return;
            }

            // Get current user info with retry logic
            int retryCount = 0;
            while (currentUser == null && retryCount < 3)
            {
                currentUser = await AuthService.GetCurrentUserAsync();
                Console.WriteLine($"DEBUG: Current user loaded: {currentUser?.Name} (Role: {currentUser?.Role}) - Attempt {retryCount + 1}");
                
                if (currentUser == null)
                {
                    await Task.Delay(200);
                    retryCount++;
                }
            }

            if (currentUser != null)
            {
                await LoadDashboardData();
            }
            else
            {
                Console.WriteLine("DEBUG: Failed to load current user after retries, redirecting to login");
                Navigation.NavigateTo($"/login?returnUrl={Uri.EscapeDataString("/dashboard")}");
                return;
            }
            
            var initTime = DateTime.Now - startTime;
            Console.WriteLine($"DEBUG: Dashboard initialization completed in {initTime.TotalMilliseconds}ms");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ERROR: Dashboard initialization failed: {ex.Message}");
            Console.WriteLine($"ERROR: Stack trace: {ex.StackTrace}");
            
            // Set error state instead of just logging
            hasError = true;
            errorMessage = "Failed to load dashboard. This might be a temporary issue - please try refreshing the page.";
            isLoading = false;
            
            // Use InvokeAsync to handle potential circuit disconnection
            try
            {
                await InvokeAsync(StateHasChanged);
            }
            catch (InvalidOperationException)
            {
                // Circuit likely disconnected, nothing we can do
                Console.WriteLine("WARNING: Could not update UI state - circuit may be disconnected");
            }
        }
    }

    private async Task LoadDashboardData()
    {
        if (currentUser == null) return;

        isLoading = true;
        hasError = false;
        errorMessage = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            Console.WriteLine($"DEBUG: Loading dashboard data for user {currentUser.Name} (Role: {currentUser.Role})");
            
            if (currentUser.Role == EventManagementSystem.Core.UserRole.EventOrganizer ||
                currentUser.Role == EventManagementSystem.Core.UserRole.Admin)
            {
                // Load organizer dashboard data with individual error handling
                try
                {
                    var statsTask = DashboardService.GetDashboardStatsAsync();
                    var liveEventsTask = DashboardService.GetLiveEventStatsAsync();

                    await Task.WhenAll(statsTask, liveEventsTask);

                    dashboardStats = await statsTask;
                    liveEvents = await liveEventsTask;
                    
                    Console.WriteLine($"DEBUG: Dashboard data loaded successfully. Stats: {dashboardStats != null}, LiveEvents: {liveEvents?.Count ?? 0}");
                }
                catch (HttpRequestException httpEx)
                {
                    Console.WriteLine($"ERROR: HTTP error loading dashboard data: {httpEx.Message}");
                    throw new Exception("Unable to connect to the server. Please check your internet connection and try again.");
                }
                catch (TaskCanceledException tcEx)
                {
                    Console.WriteLine($"ERROR: Timeout loading dashboard data: {tcEx.Message}");
                    throw new Exception("The request timed out. Please try again.");
                }
            }
            else
            {
                // Load attendee dashboard data (simplified stats)
                attendeeStats = new AttendeeStatsDto
                {
                    TotalRegistrations = 0, // TODO: Implement attendee stats service
                    UpcomingEvents = 0,
                    AttendedEvents = 0,
                    FavoriteEvents = 0
                };
                liveEvents = new List<LiveEventStatsDto>(); // Attendees don't need live event management
                Console.WriteLine("DEBUG: Attendee dashboard data loaded successfully");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ERROR: Failed to load dashboard data: {ex.Message}");
            hasError = true;
            errorMessage = ex.Message.Contains("connect to the server") || ex.Message.Contains("timed out") 
                ? ex.Message 
                : "Failed to load dashboard data. Please try again.";
        }
        finally
        {
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task RefreshData()
    {
        await LoadDashboardData();
    }

    private async Task RetryLoad()
    {
        Console.WriteLine("DEBUG: User clicked retry, reloading dashboard data");
        hasError = false;
        errorMessage = null;
        StateHasChanged();
        await LoadDashboardData();
    }

    private async Task UpgradeToOrganizer()
    {
        if (isUpgrading) return;

        isUpgrading = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            var result = await AuthService.UpgradeToOrganizerAsync();

            if (result?.Success == true)
            {
                // Update current user info
                currentUser = result.Data;

                // Show success message
                upgradeMessage = result.Message;
                showUpgradeMessage = true;

                // Reload dashboard with new role
                await LoadDashboardData();

                // Hide message after 5 seconds
                _ = Task.Delay(5000).ContinueWith(_ =>
                {
                    showUpgradeMessage = false;
                    InvokeAsync(StateHasChanged);
                });
            }
            else
            {
                upgradeMessage = result?.Message ?? "Failed to upgrade role. Please try again.";
                showUpgradeMessage = true;

                // Hide message after 5 seconds
                _ = Task.Delay(5000).ContinueWith(_ =>
                {
                    showUpgradeMessage = false;
                    InvokeAsync(StateHasChanged);
                });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error upgrading role: {ex.Message}");
            upgradeMessage = $"Error upgrading role: {ex.Message}";
            showUpgradeMessage = true;

            // Hide message after 5 seconds
            _ = Task.Delay(5000).ContinueWith(_ =>
            {
                showUpgradeMessage = false;
                InvokeAsync(StateHasChanged);
            });
        }
        finally
        {
            isUpgrading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private string GetActivityClass(string activityType)
    {
        return activityType.ToLower() switch
        {
            "registration" => "registration",
            "checkin" => "checkin",
            _ => "registration"
        };
    }

    private string GetActivityIcon(string activityType)
    {
        return activityType.ToLower() switch
        {
            "registration" => "bi-person-plus",
            "checkin" => "bi-check-circle",
            _ => "bi-info-circle"
        };
    }

    private string GetTimeAgo(DateTime timestamp)
    {
        var timeSpan = DateTime.UtcNow - timestamp;

        if (timeSpan.TotalMinutes < 1)
            return "Just now";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes}m ago";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours}h ago";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays}d ago";
        
        return timestamp.ToString("MMM dd");
    }

    private string FormatCurrency(decimal amount)
    {
        if (amount == 0)
            return "$0.00";

        return amount.ToString("C2"); // Format as currency with 2 decimal places
    }

    // Simple DTO for attendee stats (can be moved to Core project later)
    public class AttendeeStatsDto
    {
        public int TotalRegistrations { get; set; }
        public int UpcomingEvents { get; set; }
        public int AttendedEvents { get; set; }
        public int FavoriteEvents { get; set; }
    }
}
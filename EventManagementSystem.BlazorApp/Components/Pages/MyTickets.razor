@page "/my-tickets"
@page "/my-registrations"
@using EventManagementSystem.Core.DTOs
@using EventManagementSystem.Core
@inject TicketService TicketService
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>My Tickets - Event Management System</PageTitle>

<div class="my-tickets-page">
    <div class="container">
        <!-- Page Header -->
        <div class="page-header mb-4">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="page-title">
                        <i class="bi bi-ticket-perforated me-3"></i>My Tickets
                    </h1>
                    <p class="page-subtitle">
                        View and manage your event tickets and registrations
                    </p>
                </div>
                <div>
                    <button class="btn btn-outline-primary" @onclick="RefreshTickets">
                        <i class="bi bi-arrow-clockwise me-2"></i>Refresh
                    </button>
                </div>
            </div>
        </div>

        @if (isLoading)
        {
            <div class="loading-container">
                <div class="d-flex justify-content-center align-items-center" style="min-height: 400px;">
                    <div class="text-center">
                        <div class="spinner-border text-primary mb-3" role="status">
                            <span class="visually-hidden">Loading tickets...</span>
                        </div>
                        <p class="text-muted">Loading your tickets...</p>
                    </div>
                </div>
            </div>
        }
        else if (hasError)
        {
            <div class="error-container">
                <div class="alert alert-danger" role="alert">
                    <h4 class="alert-heading"><i class="bi bi-exclamation-triangle me-2"></i>Error Loading Tickets</h4>
                    <p>@errorMessage</p>
                    <hr>
                    <button class="btn btn-outline-danger" @onclick="RefreshTickets">
                        <i class="bi bi-arrow-clockwise me-2"></i>Try Again
                    </button>
                </div>
            </div>
        }
        else if (!tickets.Any())
        {
            <div class="empty-state">
                <div class="text-center py-5">
                    <i class="bi bi-ticket-detailed display-1 text-muted mb-3"></i>
                    <h3>No Tickets Yet</h3>
                    <p class="text-muted mb-4">You haven't registered for any events yet. Start exploring amazing events!</p>
                    <a href="/events" class="btn btn-primary">
                        <i class="bi bi-search me-2"></i>Browse Events
                    </a>
                </div>
            </div>
        }
        else
        {
            <!-- Ticket Filter Tabs -->
            <div class="ticket-filters mb-4">
                <ul class="nav nav-pills" id="ticket-filter-tabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @(activeFilter == "all" ? "active" : "")" 
                                @onclick='() => SetFilter("all")' type="button">
                            All Tickets (@tickets.Count)
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @(activeFilter == "upcoming" ? "active" : "")" 
                                @onclick='() => SetFilter("upcoming")' type="button">
                            Upcoming (@upcomingTickets.Count())
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @(activeFilter == "active" ? "active" : "")" 
                                @onclick='() => SetFilter("active")' type="button">
                            Live Events (@activeTickets.Count())
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @(activeFilter == "past" ? "active" : "")" 
                                @onclick='() => SetFilter("past")' type="button">
                            Past Events (@pastTickets.Count())
                        </button>
                    </li>
                </ul>
            </div>

            <!-- Tickets Grid -->
            <div class="tickets-grid">
                <div class="row g-4">
                    @foreach (var ticket in filteredTickets)
                    {
                        <div class="col-lg-6 col-xl-4">
                            <div class="ticket-card @GetTicketCardClass(ticket)">
                                <div class="ticket-header">
                                    <div class="event-image">
                                        @if (!string.IsNullOrEmpty(ticket.EventImageUrl))
                                        {
                                            <img src="@ticket.EventImageUrl" alt="@ticket.EventName" />
                                        }
                                        else
                                        {
                                            <div class="no-image">
                                                <i class="bi bi-calendar-event"></i>
                                            </div>
                                        }
                                    </div>
                                    <div class="ticket-status">
                                        <span class="badge @GetStatusBadgeClass(ticket)">
                                            @GetStatusText(ticket)
                                        </span>
                                    </div>
                                </div>
                                
                                <div class="ticket-body">
                                    <h5 class="ticket-title">@ticket.EventName</h5>
                                    <div class="ticket-details">
                                        <div class="detail-row">
                                            <i class="bi bi-calendar3"></i>
                                            <span>@ticket.EventStartDate.ToString("MMM dd, yyyy")</span>
                                        </div>
                                        <div class="detail-row">
                                            <i class="bi bi-clock"></i>
                                            <span>@ticket.EventStartDate.ToString("h:mm tt")</span>
                                        </div>
                                        <div class="detail-row">
                                            <i class="bi bi-geo-alt"></i>
                                            <span>@ticket.VenueName</span>
                                        </div>
                                        <div class="detail-row">
                                            <i class="bi bi-tag"></i>
                                            <span>@ticket.TicketTypeName - @ticket.Price.ToString("C")</span>
                                        </div>
                                    </div>
                                    
                                    <div class="ticket-info mt-3">
                                        <div class="ticket-ref">
                                            <small class="text-muted">Ticket #@ticket.UniqueReferenceCode</small>
                                        </div>
                                        @if (ticket.CheckedInAt.HasValue)
                                        {
                                            <div class="checkin-info">
                                                <small class="text-success">
                                                    <i class="bi bi-check-circle me-1"></i>
                                                    Checked in @ticket.CheckedInAt.Value.ToString("MMM dd, h:mm tt")
                                                </small>
                                            </div>
                                        }
                                    </div>
                                </div>

                                <div class="ticket-footer">
                                    <div class="ticket-actions">
                                        <button class="btn btn-primary btn-sm" @onclick="() => ShowTicketQR(ticket)">
                                            <i class="bi bi-qr-code me-1"></i>View QR
                                        </button>
                                        <a href="/events/@ticket.EventSlug" class="btn btn-outline-secondary btn-sm">
                                            <i class="bi bi-eye me-1"></i>Event Details
                                        </a>
                                        <button class="btn btn-outline-success btn-sm" @onclick="() => EmailTicket(ticket)" disabled="@(isEmailSending && emailingTicketId == ticket.IssuedTicketID)">
                                            @if (isEmailSending && emailingTicketId == ticket.IssuedTicketID)
                                            {
                                                <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                                            }
                                            else
                                            {
                                                <i class="bi bi-envelope me-1"></i>
                                            }
                                            Email
                                        </button>
                                        <button class="btn btn-outline-primary btn-sm" @onclick="() => DownloadTicket(ticket)">
                                            <i class="bi bi-download me-1"></i>Download
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

<!-- QR Code Modal -->
@if (selectedTicket != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-qr-code me-2"></i>Ticket QR Code
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseQRModal"></button>
                </div>
                <div class="modal-body text-center">
                    <div class="qr-ticket-info mb-4">
                        <h6>@selectedTicket.EventName</h6>
                        <p class="text-muted mb-1">@selectedTicket.EventStartDate.ToString("MMMM dd, yyyy • h:mm tt")</p>
                        <p class="text-muted">@selectedTicket.VenueName</p>
                        <div class="ticket-type-info">
                            <span class="badge bg-primary">@selectedTicket.TicketTypeName</span>
                            <span class="badge bg-secondary">@selectedTicket.AttendeeName</span>
                        </div>
                    </div>
                    
                    <div class="qr-code-container">
                        @if (isLoadingQR)
                        {
                            <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
                                <div class="text-center">
                                    <div class="spinner-border text-primary mb-2" role="status"></div>
                                    <small class="text-muted">Loading QR code...</small>
                                </div>
                            </div>
                        }
                        else if (!string.IsNullOrEmpty(selectedTicketQRCode))
                        {
                            <img src="data:image/png;base64,@selectedTicketQRCode" 
                                 alt="Ticket QR Code" class="qr-code-image" />
                        }
                        else
                        {
                            <div class="text-center text-muted" style="height: 200px; display: flex; align-items: center; justify-content: center;">
                                <div>
                                    <i class="bi bi-exclamation-triangle display-4"></i>
                                    <p>QR code not available</p>
                                </div>
                            </div>
                        }
                    </div>
                    
                    <div class="qr-instructions mt-4">
                        <small class="text-muted">
                            Show this QR code at the event entrance for check-in
                        </small>
                        <br>
                        <small class="text-muted">
                            Ticket #@selectedTicket.UniqueReferenceCode
                        </small>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseQRModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="() => DownloadTicket(selectedTicket)">
                        <i class="bi bi-download me-2"></i>Download Ticket
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<style>
.my-tickets-page {
    min-height: 100vh;
    background-color: #f8f9fa;
    padding: 2rem 0;
}

.page-header {
    background: white;
    padding: 2rem;
    border-radius: 12px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

.page-title {
    color: #2c3e50;
    font-weight: 600;
    margin: 0;
}

.page-subtitle {
    color: #6c757d;
    margin: 0.5rem 0 0 0;
}

.ticket-filters {
    background: white;
    padding: 1.5rem;
    border-radius: 12px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

.ticket-card {
    background: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    border: 1px solid #e9ecef;
}

.ticket-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 16px rgba(0,0,0,0.15);
}

.ticket-card.upcoming {
    border-left: 4px solid #28a745;
}

.ticket-card.active {
    border-left: 4px solid #dc3545;
    animation: pulse 2s infinite;
}

.ticket-card.past {
    border-left: 4px solid #6c757d;
    opacity: 0.8;
}

.ticket-header {
    position: relative;
    height: 150px;
    overflow: hidden;
}

.event-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.event-image .no-image {
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 3rem;
}

.ticket-status {
    position: absolute;
    top: 0.75rem;
    right: 0.75rem;
}

.ticket-body {
    padding: 1.5rem;
}

.ticket-title {
    font-size: 1.1rem;
    font-weight: 600;
    color: #2c3e50;
    margin-bottom: 1rem;
    line-height: 1.3;
}

.ticket-details .detail-row {
    display: flex;
    align-items: center;
    margin-bottom: 0.5rem;
    color: #6c757d;
    font-size: 0.9rem;
}

.ticket-details .detail-row i {
    width: 16px;
    margin-right: 0.5rem;
    color: #495057;
}

.ticket-footer {
    border-top: 1px solid #e9ecef;
    padding: 1rem 1.5rem;
    background-color: #f8f9fa;
}

.ticket-actions {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
}

.ticket-actions .btn {
    flex: 1;
    min-width: fit-content;
}

.qr-code-container {
    background: white;
    padding: 1rem;
    border-radius: 8px;
    border: 2px solid #e9ecef;
    display: inline-block;
}

.qr-code-image {
    max-width: 200px;
    height: auto;
}

.qr-ticket-info .ticket-type-info {
    margin-top: 1rem;
}

.qr-ticket-info .badge {
    margin: 0 0.25rem;
}

.empty-state {
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

.loading-container,
.error-container {
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

@@keyframes pulse {
    0% { border-left-color: #dc3545; }
    50% { border-left-color: #ff6b6b; }
    100% { border-left-color: #dc3545; }
}

/* Responsive adjustments */
@@media (max-width: 768px) {
    .my-tickets-page {
        padding: 1rem 0;
    }
    
    .page-header {
        padding: 1.5rem;
    }
    
    .ticket-filters {
        padding: 1rem;
    }
    
    .ticket-actions {
        flex-direction: column;
    }
    
    .ticket-actions .btn {
        flex: none;
    }
}
</style>

@code {
    private List<UserTicketDto> tickets = new();
    private List<UserTicketDto> filteredTickets = new();
    private bool isLoading = true;
    private bool hasError = false;
    private string errorMessage = string.Empty;
    private string activeFilter = "all";
    private UserTicketDto? selectedTicket = null;
    private bool isEmailSending = false;
    private int emailingTicketId = 0;
    private bool isLoadingQR = false;
    private string selectedTicketQRCode = string.Empty;

    // Computed properties for filtering
    private IEnumerable<UserTicketDto> upcomingTickets => tickets.Where(t => t.IsEventUpcoming);
    private IEnumerable<UserTicketDto> activeTickets => tickets.Where(t => t.IsEventActive);
    private IEnumerable<UserTicketDto> pastTickets => tickets.Where(t => t.IsEventPast);

    protected override async Task OnInitializedAsync()
    {
        await LoadTickets();
    }

    private async Task LoadTickets()
    {
        try
        {
            isLoading = true;
            hasError = false;
            StateHasChanged();

            // Check authentication
            if (!await AuthService.IsAuthenticatedAsync())
            {
                Navigation.NavigateTo("/login");
                return;
            }

            tickets = await TicketService.GetMyTicketsAsync();
            ApplyFilter();
        }
        catch (Exception ex)
        {
            hasError = true;
            errorMessage = $"Failed to load tickets: {ex.Message}";
            Console.WriteLine($"Error loading tickets: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshTickets()
    {
        await LoadTickets();
    }

    private void SetFilter(string filter)
    {
        activeFilter = filter;
        ApplyFilter();
        StateHasChanged();
    }

    private void ApplyFilter()
    {
        filteredTickets = activeFilter switch
        {
            "upcoming" => upcomingTickets.ToList(),
            "active" => activeTickets.ToList(),
            "past" => pastTickets.ToList(),
            _ => tickets
        };
    }

    private async Task ShowTicketQR(UserTicketDto ticket)
    {
        selectedTicket = ticket;
        selectedTicketQRCode = string.Empty;
        isLoadingQR = true;
        StateHasChanged();

        try
        {
            var qrCode = await TicketService.GetQRCodeBase64Async(ticket.IssuedTicketID);
            selectedTicketQRCode = qrCode ?? string.Empty;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading QR code: {ex.Message}");
        }
        finally
        {
            isLoadingQR = false;
            StateHasChanged();
        }
    }

    private void CloseQRModal()
    {
        selectedTicket = null;
        selectedTicketQRCode = string.Empty;
        isLoadingQR = false;
        StateHasChanged();
    }

    private string GetTicketCardClass(UserTicketDto ticket)
    {
        return ticket.IsEventActive ? "active" : ticket.IsEventUpcoming ? "upcoming" : "past";
    }

    private string GetStatusBadgeClass(UserTicketDto ticket)
    {
        if (ticket.CheckedInAt.HasValue)
            return "bg-success";
        
        return ticket.IsEventActive ? "bg-danger" : ticket.IsEventUpcoming ? "bg-primary" : "bg-secondary";
    }

    private string GetStatusText(UserTicketDto ticket)
    {
        if (ticket.CheckedInAt.HasValue)
            return "Checked In";
        
        return ticket.IsEventActive ? "Live Event" : ticket.IsEventUpcoming ? "Upcoming" : "Past Event";
    }

    private async Task EmailTicket(UserTicketDto ticket)
    {
        try
        {
            isEmailSending = true;
            emailingTicketId = ticket.IssuedTicketID;
            StateHasChanged();

            var success = await TicketService.SendTicketEmailAsync(ticket.IssuedTicketID);
            
            if (success)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"✅ Ticket for {ticket.EventName} has been sent to {ticket.AttendeeEmail}!");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"❌ Failed to send ticket email. Please try again.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error emailing ticket: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"❌ Error sending email: {ex.Message}");
        }
        finally
        {
            isEmailSending = false;
            emailingTicketId = 0;
            StateHasChanged();
        }
    }

    private async Task DownloadTicket(UserTicketDto ticket)
    {
        try
        {
            Console.WriteLine($"Downloading ticket PDF for: {ticket.EventName}");
            
            // Use the TicketService to download with proper authentication
            await TicketService.DownloadTicketPdfAsync(ticket.IssuedTicketID, $"Ticket-{ticket.EventName.Replace(" ", "-")}-{ticket.UniqueReferenceCode}.pdf");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading ticket: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"❌ Error downloading ticket: {ex.Message}");
        }
    }

    private string GetApiUrl(string endpoint)
    {
        // Get the API base URL from configuration or use default
        return $"https://localhost:7203/{endpoint}";
    }
}
@page "/reset-password"
@layout EventManagementSystem.BlazorApp.Components.Layout.AuthLayout
@using EventManagementSystem.Core.DTOs
@using EventManagementSystem.BlazorApp.Services
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Reset Password - Event Management System</PageTitle>

<div class="reset-password-container">
    <div class="reset-password-card">
        <!-- Header -->
        <div class="reset-password-header">
            <div class="reset-password-logo">
                <i class="bi bi-shield-lock"></i>
            </div>
            <h2>Reset Your Password</h2>
            <p class="text-muted">Create a new, secure password for your account.</p>
        </div>

        @if (!isTokenValid)
        {
            <!-- Invalid Token State -->
            <div class="invalid-token-state">
                <div class="error-icon">
                    <i class="bi bi-exclamation-triangle"></i>
                </div>
                <h3>Invalid or Expired Link</h3>
                <p>This password reset link is invalid or has expired. Please request a new one.</p>
                <a href="/forgot-password" class="btn btn-primary">
                    <i class="bi bi-arrow-left me-2"></i>
                    Request New Reset Link
                </a>
            </div>
        }
        else if (!isPasswordReset)
        {
            <!-- Reset Password Form -->
            <EditForm Model="resetPasswordDto" OnValidSubmit="HandleResetPassword" class="reset-password-form">
                <DataAnnotationsValidator />

                <!-- Show Alert Messages -->
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        <i class="bi bi-exclamation-triangle me-2" aria-hidden="true"></i>
                        @errorMessage
                    </div>
                }

                <!-- New Password Field -->
                <div class="form-group">
                    <label for="newPassword" class="form-label">New Password</label>
                    <div class="input-group">
                        <span class="input-group-text" aria-label="Password icon">
                            <i class="bi bi-lock" aria-hidden="true"></i>
                        </span>
                        <InputText type="@(showPassword ? "text" : "password")"
                                   @bind-Value="resetPasswordDto.NewPassword"
                                   class="form-control"
                                   id="newPassword"
                                   placeholder="Enter your new password"
                                   autocomplete="new-password"
                                   @oninput="OnPasswordInput"
                                   aria-describedby="password-validation" />
                        <button type="button"
                                class="btn btn-outline-secondary"
                                @onclick="TogglePasswordVisibility"
                                aria-label="@(showPassword ? "Hide password" : "Show password")">
                            <i class="bi @(showPassword ? "bi-eye-slash" : "bi-eye")" aria-hidden="true"></i>
                        </button>
                    </div>
                    <ValidationMessage For="@(() => resetPasswordDto.NewPassword)"
                                       class="text-danger"
                                       id="password-validation" />
                </div>

                <!-- Password Strength Indicator -->
                @if (!string.IsNullOrEmpty(resetPasswordDto.NewPassword))
                {
                    <div class="password-strength">
                        <div class="strength-header">
                            <span class="strength-label">Password Strength:</span>
                            <span class="strength-value text-@GetStrengthColor()">@passwordStrength</span>
                        </div>
                        <div class="password-requirements">
                            <div class="requirement-item @(passwordChecks.MinLength ? "valid" : "")">
                                <i class="bi @(passwordChecks.MinLength ? "bi-check-circle-fill" : "bi-circle")"></i>
                                At least 6 characters
                            </div>
                            <div class="requirement-item @(passwordChecks.HasUpper ? "valid" : "")">
                                <i class="bi @(passwordChecks.HasUpper ? "bi-check-circle-fill" : "bi-circle")"></i>
                                One uppercase letter
                            </div>
                            <div class="requirement-item @(passwordChecks.HasLower ? "valid" : "")">
                                <i class="bi @(passwordChecks.HasLower ? "bi-check-circle-fill" : "bi-circle")"></i>
                                One lowercase letter
                            </div>
                            <div class="requirement-item @(passwordChecks.HasNumber ? "valid" : "")">
                                <i class="bi @(passwordChecks.HasNumber ? "bi-check-circle-fill" : "bi-circle")"></i>
                                One number
                            </div>
                        </div>
                    </div>
                }

                <!-- Confirm Password Field -->
                <div class="form-group">
                    <label for="confirmPassword" class="form-label">Confirm New Password</label>
                    <div class="input-group">
                        <span class="input-group-text" aria-label="Confirm password icon">
                            <i class="bi bi-lock-fill" aria-hidden="true"></i>
                        </span>
                        <InputText type="@(showConfirmPassword ? "text" : "password")"
                                   @bind-Value="resetPasswordDto.ConfirmPassword"
                                   class="form-control"
                                   id="confirmPassword"
                                   placeholder="Confirm your new password"
                                   autocomplete="new-password"
                                   aria-describedby="confirm-password-validation" />
                        <button type="button"
                                class="btn btn-outline-secondary"
                                @onclick="ToggleConfirmPasswordVisibility"
                                aria-label="@(showConfirmPassword ? "Hide password" : "Show password")">
                            <i class="bi @(showConfirmPassword ? "bi-eye-slash" : "bi-eye")" aria-hidden="true"></i>
                        </button>
                    </div>
                    <ValidationMessage For="@(() => resetPasswordDto.ConfirmPassword)"
                                       class="text-danger"
                                       id="confirm-password-validation" />
                </div>

                <!-- Submit Button -->
                <button type="submit"
                        class="btn btn-primary btn-lg w-100"
                        disabled="@(isLoading || !IsFormValid())">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>Resetting Password...</span>
                    }
                    else
                    {
                        <i class="bi bi-shield-check me-2" aria-hidden="true"></i>
                        <span>Reset Password</span>
                    }
                </button>
            </EditForm>
        }
        else
        {
            <!-- Success State -->
            <div class="success-state">
                <div class="success-icon">
                    <i class="bi bi-check-circle"></i>
                </div>
                <h3>Password Reset Successful!</h3>
                <p>Your password has been successfully reset. You can now sign in with your new password.</p>
                <a href="/login" class="btn btn-primary btn-lg">
                    <i class="bi bi-box-arrow-in-right me-2"></i>
                    Sign In Now
                </a>
            </div>
        }

        <!-- Back to Login Link -->
        <div class="reset-password-footer">
            <p class="text-center text-muted">
                Remember your password?
                <a href="/login" class="back-to-login-link">Back to Sign In</a>
            </p>
        </div>
    </div>
</div>

<style>
    .reset-password-container {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
        padding: 20px;
    }

    .reset-password-card {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border-radius: var(--border-radius-xl);
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        padding: 40px;
        max-width: 500px;
        width: 100%;
        border: 1px solid rgba(255, 255, 255, 0.2);
        position: relative;
        overflow: hidden;
    }

    .reset-password-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, var(--primary-color) 0%, var(--accent-color) 100%);
    }

    .reset-password-header {
        text-align: center;
        margin-bottom: 30px;
    }

    .reset-password-logo {
        color: var(--primary-color);
        font-size: 3rem;
        margin-bottom: 20px;
    }

    .reset-password-header h2 {
        color: var(--gray-800);
        font-weight: 700;
        margin-bottom: 8px;
        background: linear-gradient(135deg, var(--primary-color) 0%, var(--accent-color) 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .invalid-token-state,
    .success-state {
        text-align: center;
        padding: 20px 0;
    }

    .error-icon {
        color: var(--danger-red);
        font-size: 4rem;
        margin-bottom: 20px;
    }

    .success-icon {
        color: var(--success-green);
        font-size: 4rem;
        margin-bottom: 20px;
        animation: bounceIn 0.6s ease-out;
    }

    .invalid-token-state h3,
    .success-state h3 {
        color: var(--gray-800);
        font-weight: 700;
        margin-bottom: 15px;
    }

    .reset-password-form .form-group {
        margin-bottom: 20px;
    }

    .reset-password-form .form-label {
        font-weight: 600;
        color: var(--gray-700);
        margin-bottom: 8px;
    }

    .reset-password-footer {
        margin-top: 30px;
        padding-top: 20px;
        border-top: 1px solid var(--gray-200);
    }

    .back-to-login-link {
        color: var(--primary-color);
        text-decoration: none;
        font-weight: 600;
        transition: var(--transition-base);
    }

    .back-to-login-link:hover {
        color: var(--primary-dark);
        text-decoration: underline;
    }

    @@keyframes bounceIn {
        0% {
            opacity: 0;
            transform: scale(0.3);
        }
        50% {
            opacity: 1;
            transform: scale(1.05);
        }
        70% {
            transform: scale(0.9);
        }
        100% {
            opacity: 1;
            transform: scale(1);
        }
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .reset-password-card {
            padding: 30px 20px;
            margin: 10px;
        }
        
        .reset-password-logo {
            font-size: 2.5rem;
        }
    }

    @@media (max-width: 480px) {
        .reset-password-container {
            padding: 10px;
        }
        
        .reset-password-card {
            padding: 20px 15px;
        }
    }
</style>

@code {
    private ResetPasswordDto resetPasswordDto = new();
    private bool isLoading = false;
    private bool isTokenValid = false;
    private bool isPasswordReset = false;
    private bool showPassword = false;
    private bool showConfirmPassword = false;
    private string errorMessage = string.Empty;

    // Password strength tracking
    private string passwordStrength = "Weak";
    private PasswordChecks passwordChecks = new();

    private class PasswordChecks
    {
        public bool MinLength { get; set; }
        public bool HasUpper { get; set; }
        public bool HasLower { get; set; }
        public bool HasNumber { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already authenticated
        if (await AuthService.IsAuthenticatedAsync())
        {
            Navigation.NavigateTo("/dashboard");
            return;
        }

        // Get token and email from query parameters
        var uri = new Uri(Navigation.Uri);
        var query = uri.Query;

        if (!string.IsNullOrEmpty(query))
        {
            var queryParams = query.TrimStart('?').Split('&');

            var tokenParam = queryParams.FirstOrDefault(p => p.StartsWith("token="));
            var emailParam = queryParams.FirstOrDefault(p => p.StartsWith("email="));

            if (tokenParam != null && emailParam != null)
            {
                resetPasswordDto.Token = Uri.UnescapeDataString(tokenParam.Substring("token=".Length));
                resetPasswordDto.Email = Uri.UnescapeDataString(emailParam.Substring("email=".Length));
                isTokenValid = true;
            }
        }

        if (!isTokenValid)
        {
            // Invalid or missing parameters
            isTokenValid = false;
        }
    }

    private async Task HandleResetPassword()
    {
        if (isLoading || !IsFormValid()) return;

        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var result = await AuthService.ResetPasswordAsync(resetPasswordDto);

            if (result?.Success == true)
            {
                isPasswordReset = true;
            }
            else
            {
                errorMessage = result?.Message ?? "Failed to reset password. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred. Please try again later.";
            Console.WriteLine($"Reset password error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void OnPasswordInput(ChangeEventArgs e)
    {
        var password = e.Value?.ToString() ?? "";
        resetPasswordDto.NewPassword = password;

        CalculatePasswordStrength(password);
        StateHasChanged();
    }

    private void CalculatePasswordStrength(string password)
    {
        passwordChecks.MinLength = password.Length >= 6;
        passwordChecks.HasUpper = password.Any(char.IsUpper);
        passwordChecks.HasLower = password.Any(char.IsLower);
        passwordChecks.HasNumber = password.Any(char.IsDigit);

        var score = 0;
        if (passwordChecks.MinLength) score++;
        if (passwordChecks.HasUpper) score++;
        if (passwordChecks.HasLower) score++;
        if (passwordChecks.HasNumber) score++;

        passwordStrength = score switch
        {
            <= 1 => "Weak",
            2 => "Fair",
            3 => "Good",
            4 => "Strong",
            _ => "Weak"
        };
    }

    private string GetStrengthColor()
    {
        return passwordStrength switch
        {
            "Strong" => "success",
            "Good" => "info",
            "Fair" => "warning",
            _ => "danger"
        };
    }

    private void TogglePasswordVisibility() => showPassword = !showPassword;
    private void ToggleConfirmPasswordVisibility() => showConfirmPassword = !showConfirmPassword;

    private bool IsFormValid()
    {
        return !string.IsNullOrWhiteSpace(resetPasswordDto.NewPassword) &&
               !string.IsNullOrWhiteSpace(resetPasswordDto.ConfirmPassword) &&
               resetPasswordDto.NewPassword == resetPasswordDto.ConfirmPassword &&
               resetPasswordDto.NewPassword.Length >= 6;
    }
}

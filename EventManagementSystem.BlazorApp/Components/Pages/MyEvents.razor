@page "/my-events"
@using EventManagementSystem.Core.DTOs
@using EventManagementSystem.Core
@using EventManagementSystem.BlazorApp.Services
@using Microsoft.JSInterop
@inject EventService EventService
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>My Events - Event Management System</PageTitle>

<!-- My Events Management Page -->
<div class="my-events-page">
    <div class="container-fluid">
        <!-- Page Header -->
        <div class="page-header mb-4">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="page-title">
                        <i class="bi bi-calendar-event me-3"></i>My Events
                    </h1>
                    <p class="page-subtitle">Manage and organize your events</p>
                </div>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-primary" @onclick="RefreshEvents">
                        <i class="bi bi-arrow-clockwise me-2"></i>Refresh
                    </button>
                    <a href="/create-event" class="btn btn-primary">
                        <i class="bi bi-plus-circle me-2"></i>Create New Event
                    </a>
                </div>
            </div>
        </div>

        <!-- Filters and Search -->
        <div class="filters-section mb-4">
            <div class="row g-3 align-items-center">
                <div class="col-md-4">
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="bi bi-search"></i>
                        </span>
                        <input type="text" class="form-control" placeholder="Search events..." @bind="searchTerm" @oninput="OnSearchInput">
                    </div>
                </div>
                <div class="col-md-3">
                    <select class="form-select" @bind="selectedStatus" @bind:after="FilterEvents">
                        <option value="">All Status</option>
                        <option value="Draft">Draft</option>
                        <option value="Published">Published</option>
                        <option value="InProgress">In Progress</option>
                        <option value="Completed">Completed</option>
                        <option value="Cancelled">Cancelled</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <select class="form-select" @bind="sortBy" @bind:after="SortEvents">
                        <option value="date">Sort by Date</option>
                        <option value="name">Sort by Name</option>
                        <option value="status">Sort by Status</option>
                        <option value="registrations">Sort by Registrations</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <div class="btn-group w-100" role="group">
                        <button type="button" class="btn @(viewMode == "grid" ? "btn-primary" : "btn-outline-primary")" @onclick="SetGridView">
                            <i class="bi bi-grid"></i>
                        </button>
                        <button type="button" class="btn @(viewMode == "list" ? "btn-primary" : "btn-outline-primary")" @onclick="SetListView">
                            <i class="bi bi-list-ul"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Loading State -->
        @if (isLoading)
        {
            <div class="loading-container">
                <div class="d-flex justify-content-center py-5">
                    <div class="text-center">
                        <div class="spinner-border text-primary mb-3" role="status">
                            <span class="visually-hidden">Loading events...</span>
                        </div>
                        <p class="text-muted">Loading your events...</p>
                    </div>
                </div>
            </div>
        }
        else if (hasError)
        {
            <!-- Error State -->
            <div class="alert alert-danger" role="alert">
                <h4 class="alert-heading"><i class="bi bi-exclamation-triangle me-2"></i>Error</h4>
                <p>@errorMessage</p>
                <button class="btn btn-outline-danger" @onclick="RefreshEvents">
                    <i class="bi bi-arrow-clockwise me-2"></i>Try Again
                </button>
            </div>
        }
        else if (!filteredEvents.Any())
        {
            <!-- Empty State -->
            <div class="empty-state text-center py-5">
                <div class="empty-icon mb-4">
                    <i class="bi bi-calendar-x"></i>
                </div>
                @if (string.IsNullOrEmpty(searchTerm) && string.IsNullOrEmpty(selectedStatus))
                {
                    <h3>No Events Yet</h3>
                    <p class="text-muted mb-4">Start creating amazing events for your audience!</p>
                    <a href="/create-event" class="btn btn-primary">
                        <i class="bi bi-plus-circle me-2"></i>Create Your First Event
                    </a>
                }
                else
                {
                    <h3>No Events Found</h3>
                    <p class="text-muted mb-4">Try adjusting your search criteria or filters.</p>
                    <button class="btn btn-outline-primary" @onclick="ClearFilters">
                        <i class="bi bi-funnel me-2"></i>Clear Filters
                    </button>
                }
            </div>
        }
        else
        {
            <!-- Events Content -->
            <!-- Stats Summary -->
            <div class="stats-summary mb-4">
                <div class="row g-3">
                    <div class="col-md-3">
                        <div class="stat-card">
                            <div class="stat-icon total">
                                <i class="bi bi-calendar-event"></i>
                            </div>
                            <div class="stat-content">
                                <h4>@allEvents.Count</h4>
                                <span>Total Events</span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stat-card">
                            <div class="stat-icon published">
                                <i class="bi bi-broadcast"></i>
                            </div>
                            <div class="stat-content">
                                <h4>@allEvents.Count(e => e.Status == EventStatus.Published)</h4>
                                <span>Published</span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stat-card">
                            <div class="stat-icon draft">
                                <i class="bi bi-pencil"></i>
                            </div>
                            <div class="stat-content">
                                <h4>@allEvents.Count(e => e.Status == EventStatus.Draft)</h4>
                                <span>Drafts</span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stat-card">
                            <div class="stat-icon registrations">
                                <i class="bi bi-people"></i>
                            </div>
                            <div class="stat-content">
                                <h4>@allEvents.Sum(e => e.TotalRegistrations)</h4>
                                <span>Total Registrations</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Grid View -->
            @if (viewMode == "grid")
            {
                <div class="events-grid">
                    <div class="row g-4">
                        @foreach (var eventItem in filteredEvents)
                        {
                            <div class="col-xl-4 col-lg-6">
                                <div class="event-card">
                                    <!-- Event Image -->
                                    <div class="event-image">
                                        @if (!string.IsNullOrEmpty(eventItem.ImageUrl))
                                        {
                                            <img src="@eventItem.ImageUrl" alt="@eventItem.EventName" class="card-img">
                                        }
                                        else
                                        {
                                            <div class="placeholder-image">
                                                <i class="bi bi-calendar-event"></i>
                                            </div>
                                        }
                                        <div class="event-status @GetStatusClass(eventItem.Status)">
                                            @eventItem.Status
                                        </div>
                                        <div class="event-actions">
                                            <button class="btn btn-sm btn-light" @onclick="() => EditEvent(eventItem.EventID)" title="Edit Event">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn btn-sm btn-light" @onclick="@(async () => await ManageAssistants(eventItem.EventID))" title="Manage Assistants">
                                                <i class="bi bi-person-plus"></i>
                                            </button>
                                            <button class="btn btn-sm btn-light" @onclick="() => ToggleEventStatus(eventItem)" title="@GetStatusToggleText(eventItem.Status)">
                                                <i class="bi @GetStatusToggleIcon(eventItem.Status)"></i>
                                            </button>
                                            <button class="btn btn-sm btn-light dropdown-toggle" data-bs-toggle="dropdown" title="More Actions">
                                                <i class="bi bi-three-dots"></i>
                                            </button>
                                            <ul class="dropdown-menu">
                                                <li><a class="dropdown-item" href="/events/@eventItem.UrlSlug"><i class="bi bi-eye me-2"></i>View</a></li>
                                                <li><a class="dropdown-item" @onclick="() => DuplicateEvent(eventItem.EventID)"><i class="bi bi-copy me-2"></i>Duplicate</a></li>
                                                <li><a class="dropdown-item" @onclick="() => ViewRegistrations(eventItem.EventID)"><i class="bi bi-people me-2"></i>Registrations</a></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li><h6 class="dropdown-header">Event Management</h6></li>
                                                <li><a class="dropdown-item" href="/events/@eventItem.EventID/dashboard"><i class="bi bi-speedometer2 me-2"></i>Check-In Dashboard</a></li>
                                                <li><a class="dropdown-item" href="/events/@eventItem.EventID/checkin"><i class="bi bi-qr-code-scan me-2"></i>Start Check-In Scanner</a></li>
                                                <li><a class="dropdown-item" @onclick="@(async () => await ManageAssistants(eventItem.EventID))" @onclick:preventDefault="true" @onclick:stopPropagation="true"><i class="bi bi-person-plus me-2"></i>Manage Assistants</a></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li><a class="dropdown-item text-danger" @onclick="() => DeleteEvent(eventItem.EventID)"><i class="bi bi-trash me-2"></i>Delete</a></li>
                                            </ul>
                                        </div>
                                    </div>

                                    <!-- Event Content -->
                                    <div class="event-content">
                                        <div class="event-header">
                                            <h5 class="event-title">@eventItem.EventName</h5>
                                            @if (!string.IsNullOrEmpty(eventItem.CategoryName))
                                            {
                                                <span class="category-badge">@eventItem.CategoryName</span>
                                            }
                                        </div>

                                        <div class="event-details">
                                            <div class="event-detail">
                                                <i class="bi bi-calendar3"></i>
                                                <span>@eventItem.StartDate?.ToString("MMM dd, yyyy")</span>
                                            </div>
                                            <div class="event-detail">
                                                <i class="bi bi-geo-alt"></i>
                                                <span>@eventItem.VenueName</span>
                                            </div>
                                            <div class="event-detail">
                                                <i class="bi bi-people"></i>
                                                <span>@eventItem.TotalRegistrations / @(eventItem.MaxCapacity?.ToString() ?? "∞") registered</span>
                                            </div>
                                        </div>

                                        <div class="event-footer">
                                            <div class="registration-progress">
                                                @if (eventItem.MaxCapacity.HasValue)
                                                {
                                                    var percentage = eventItem.MaxCapacity > 0 ? (double)eventItem.TotalRegistrations / eventItem.MaxCapacity.Value * 100 : 0;
                                                    <div class="progress">
                                                        <div class="progress-bar @GetProgressBarClass(percentage)" role="progressbar" style="width: @percentage%"></div>
                                                    </div>
                                                    <small class="text-muted">@percentage.ToString("F0")% capacity</small>
                                                }
                                                else
                                                {
                                                    <small class="text-muted">Unlimited capacity</small>
                                                }
                                            </div>
                                            <div class="event-actions-footer">
                                                <button class="btn btn-sm btn-outline-primary" @onclick="() => EditEvent(eventItem.EventID)">
                                                    <i class="bi bi-pencil me-1"></i>Edit
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
            <!-- List View -->
            else
            {
                <div class="events-list">
                    <div class="list-header">
                        <div class="row fw-bold text-muted border-bottom pb-2">
                            <div class="col-md-4">Event</div>
                            <div class="col-md-2">Status</div>
                            <div class="col-md-2">Date</div>
                            <div class="col-md-2">Registrations</div>
                            <div class="col-md-2">Actions</div>
                        </div>
                    </div>
                    <div class="list-body">
                        @foreach (var eventItem in filteredEvents)
                        {
                            <div class="list-item">
                                <div class="row align-items-center py-3 border-bottom">
                                    <div class="col-md-4">
                                        <div class="d-flex align-items-center">
                                            <div class="event-thumbnail me-3">
                                                @if (!string.IsNullOrEmpty(eventItem.ImageUrl))
                                                {
                                                    <img src="@eventItem.ImageUrl" alt="@eventItem.EventName" class="thumbnail-img">
                                                }
                                                else
                                                {
                                                    <div class="placeholder-thumbnail">
                                                        <i class="bi bi-calendar-event"></i>
                                                    </div>
                                                }
                                            </div>
                                            <div>
                                                <h6 class="mb-1">@eventItem.EventName</h6>
                                                <small class="text-muted">@eventItem.VenueName</small>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <span class="status-badge @GetStatusClass(eventItem.Status)">
                                            @eventItem.Status
                                        </span>
                                    </div>
                                    <div class="col-md-2">
                                        <span>@eventItem.StartDate?.ToString("MMM dd, yyyy")</span>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="d-flex align-items-center">
                                            <i class="bi bi-people me-1"></i>
                                            <span>@eventItem.TotalRegistrations</span>
                                            @if (eventItem.MaxCapacity.HasValue)
                                            {
                                                <span class="text-muted">/@eventItem.MaxCapacity</span>
                                            }
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="btn-group">
                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => EditEvent(eventItem.EventID)" title="Edit">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-primary" @onclick="@(async () => await ManageAssistants(eventItem.EventID))" title="Manage Assistants">
                                                <i class="bi bi-person-plus"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ToggleEventStatus(eventItem)" title="@GetStatusToggleText(eventItem.Status)">
                                                <i class="bi @GetStatusToggleIcon(eventItem.Status)"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown" title="More">
                                                <i class="bi bi-three-dots"></i>
                                            </button>
                                            <ul class="dropdown-menu">
                                                <li><a class="dropdown-item" href="/events/@eventItem.UrlSlug"><i class="bi bi-eye me-2"></i>View</a></li>
                                                <li><a class="dropdown-item" @onclick="() => DuplicateEvent(eventItem.EventID)"><i class="bi bi-copy me-2"></i>Duplicate</a></li>
                                                <li><a class="dropdown-item" @onclick="() => ViewRegistrations(eventItem.EventID)"><i class="bi bi-people me-2"></i>Registrations</a></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li><h6 class="dropdown-header">Event Management</h6></li>
                                                <li><a class="dropdown-item" href="/events/@eventItem.EventID/dashboard"><i class="bi bi-speedometer2 me-2"></i>Check-In Dashboard</a></li>
                                                <li><a class="dropdown-item" href="/events/@eventItem.EventID/checkin"><i class="bi bi-qr-code-scan me-2"></i>Start Check-In Scanner</a></li>
                                                <li><a class="dropdown-item" @onclick="@(async () => await ManageAssistants(eventItem.EventID))" @onclick:preventDefault="true" @onclick:stopPropagation="true"><i class="bi bi-person-plus me-2"></i>Manage Assistants</a></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li><a class="dropdown-item text-danger" @onclick="() => DeleteEvent(eventItem.EventID)"><i class="bi bi-trash me-2"></i>Delete</a></li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    private List<EventDto> allEvents = new();
    private List<EventDto> filteredEvents = new();
    private bool isLoading = true;
    private bool hasError = false;
    private string? errorMessage;
    private string searchTerm = "";
    private string selectedStatus = "";
    private string sortBy = "date";
    private string viewMode = "grid";

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        isLoading = true;
        hasError = false;
        errorMessage = null;
        StateHasChanged();

        try
        {
            // Check authentication first
            if (!await AuthService.IsAuthenticatedAsync())
            {
                Navigation.NavigateTo("/login");
                return;
            }

            // Get current user
            var currentUser = await AuthService.GetCurrentUserAsync();
            if (currentUser == null)
            {
                Navigation.NavigateTo("/login");
                return;
            }

            // Add small delay to ensure authentication is fully established
            await Task.Delay(200);

            // Load user's events
            allEvents = await EventService.GetMyEventsAsync();
            FilterEvents();
        }
        catch (Exception ex)
        {
            hasError = true;
            errorMessage = $"Failed to load events: {ex.Message}";
            Console.WriteLine($"Error loading events: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshEvents()
    {
        await LoadEvents();
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        FilterEvents();
    }

    private void FilterEvents()
    {
        var query = allEvents.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrEmpty(searchTerm))
        {
            query = query.Where(e => 
                e.EventName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (e.EventDesc != null && e.EventDesc.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (e.VenueName != null && e.VenueName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            );
        }

        // Apply status filter
        if (!string.IsNullOrEmpty(selectedStatus))
        {
            if (Enum.TryParse<EventStatus>(selectedStatus, out var status))
            {
                query = query.Where(e => e.Status == status);
            }
        }

        // Apply sorting
        filteredEvents = sortBy switch
        {
            "name" => query.OrderBy(e => e.EventName).ToList(),
            "status" => query.OrderBy(e => e.Status).ToList(),
            "registrations" => query.OrderByDescending(e => e.TotalRegistrations).ToList(),
            _ => query.OrderByDescending(e => e.StartDate).ToList(),
        };

        StateHasChanged();
    }

    private void SortEvents()
    {
        FilterEvents();
    }

    private void ClearFilters()
    {
        searchTerm = "";
        selectedStatus = "";
        FilterEvents();
    }

    private void SetViewMode(string mode)
    {
        viewMode = mode;
        StateHasChanged();
    }

    private void SetGridView()
    {
        SetViewMode("grid");
    }

    private void SetListView()
    {
        SetViewMode("list");
    }

    private void EditEvent(int eventId)
    {
        Navigation.NavigateTo($"/edit-event/{eventId}");
    }

    private async Task ManageAssistants(int eventId)
    {
        try
        {
            var url = $"/events/{eventId}/assistants";
            Console.WriteLine($"🔵 Navigating to: {url}");
            
            // Use JavaScript to navigate to avoid Blazor navigation conflicts
            await JSRuntime.InvokeVoidAsync("navigateToUrl", url);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"🔴 Navigation error: {ex.Message}");
            // Fallback to Blazor navigation
            Navigation.NavigateTo($"/events/{eventId}/assistants");
        }
    }

    private async Task ToggleEventStatus(EventDto eventItem)
    {
        try
        {
            var newStatus = eventItem.Status == EventStatus.Published ? EventStatus.Draft : EventStatus.Published;
            var success = await EventService.UpdateEventStatusAsync(eventItem.EventID, newStatus);
            
            if (success)
            {
                eventItem.Status = newStatus;
                StateHasChanged();
            }
            else
            {
                await SafeJSInvokeAsync("alert", "Failed to update event status");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling status: {ex.Message}");
            await SafeJSInvokeAsync("alert", "Error updating event status");
        }
    }

    private async Task DuplicateEvent(int eventId)
    {
        if (await SafeJSInvokeAsync<bool>("confirm", "Create a duplicate of this event?"))
        {
            try
            {
                var newEventId = await EventService.DuplicateEventAsync(eventId);
                if (newEventId > 0)
                {
                    await LoadEvents(); // Refresh the list
                    Navigation.NavigateTo($"/edit-event/{newEventId}");
                }
                else
                {
                    await SafeJSInvokeAsync("alert", "Failed to duplicate event");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error duplicating event: {ex.Message}");
                await SafeJSInvokeAsync("alert", "Error duplicating event");
            }
        }
    }

    private void ViewRegistrations(int eventId)
    {
        Navigation.NavigateTo($"/event-registrations/{eventId}");
    }

    private async Task DeleteEvent(int eventId)
    {
        if (await SafeJSInvokeAsync<bool>("confirm", "Are you sure you want to delete this event? This action cannot be undone."))
        {
            try
            {
                var success = await EventService.DeleteEventAsync(eventId);
                if (success)
                {
                    await LoadEvents(); // Refresh the list
                }
                else
                {
                    await SafeJSInvokeAsync("alert", "Failed to delete event");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting event: {ex.Message}");
                await SafeJSInvokeAsync("alert", "Error deleting event");
            }
        }
    }

    private string GetStatusClass(EventStatus status)
    {
        return status switch
        {
            EventStatus.Published => "published",
            EventStatus.Draft => "draft",
            EventStatus.InProgress => "in-progress",
            EventStatus.Completed => "completed",
            EventStatus.Cancelled => "cancelled",
            _ => "draft"
        };
    }

    private string GetStatusToggleText(EventStatus status)
    {
        return status == EventStatus.Published ? "Unpublish" : "Publish";
    }

    private string GetStatusToggleIcon(EventStatus status)
    {
        return status == EventStatus.Published ? "bi-eye-slash" : "bi-broadcast";
    }

    private string GetProgressBarClass(double percentage)
    {
        return percentage switch
        {
            >= 90 => "bg-danger",
            >= 70 => "bg-warning",
            _ => "bg-success"
        };
    }

    // Helper method to safely call JSRuntime when circuit might be disconnected
    private async Task SafeJSInvokeAsync(string method, params object[] args)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync(method, args);
        }
        catch (JSDisconnectedException)
        {
            // Circuit disconnected, silently ignore
            Console.WriteLine($"JSRuntime call to {method} failed: Circuit disconnected");
        }
        catch (InvalidOperationException ex) when (ex.Message.Contains("circuit"))
        {
            // Another circuit-related error
            Console.WriteLine($"JSRuntime call to {method} failed: {ex.Message}");
        }
    }

    private async Task<T> SafeJSInvokeAsync<T>(string method, params object[] args)
    {
        try
        {
            return await JSRuntime.InvokeAsync<T>(method, args);
        }
        catch (JSDisconnectedException)
        {
            // Circuit disconnected, return default value
            Console.WriteLine($"JSRuntime call to {method} failed: Circuit disconnected");
            return default(T);
        }
        catch (InvalidOperationException ex) when (ex.Message.Contains("circuit"))
        {
            // Another circuit-related error
            Console.WriteLine($"JSRuntime call to {method} failed: {ex.Message}");
            return default(T);
        }
    }
}